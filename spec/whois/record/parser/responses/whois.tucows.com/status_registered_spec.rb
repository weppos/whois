# encoding: utf-8

# This file is autogenerated. Do not edit it manually.
# If you want change the content of this file, edit
#
#   /spec/fixtures/responses/whois.tucows.com/status_registered.expected
#
# and regenerate the tests with the following rake task
#
#   $ rake spec:generate
#

require 'spec_helper'
require 'whois/record/parser/whois.tucows.com.rb'

describe Whois::Record::Parser::WhoisTucowsCom, "status_registered.expected" do

  subject do
    file = fixture("responses", "whois.tucows.com/status_registered.txt")
    part = Whois::Record::Part.new(body: File.read(file))
    described_class.new(part)
  end

  describe "#domain" do
    it do
      expect(subject.domain).to eq("tucows.com")
    end
  end
  describe "#domain_id" do
    it do
      expect(subject.domain_id).to eq("")
    end
  end
  describe "#status" do
    it do
      expect(subject.status).to eq(:registered)
    end
  end
  describe "#available?" do
    it do
      expect(subject.available?).to be_falsey
    end
  end
  describe "#registered?" do
    it do
      expect(subject.registered?).to be_truthy
    end
  end
  describe "#created_on" do
    it do
      expect(subject.created_on).to be_a(Time)
      expect(subject.created_on).to eq(Time.parse("1995-09-07 04:00:00"))
    end
  end
  describe "#updated_on" do
    it do
      expect(subject.updated_on).to be_a(Time)
      expect(subject.updated_on).to eq(Time.parse("2013-08-07 23:52:35"))
    end
  end
  describe "#expires_on" do
    it do
      expect(subject.expires_on).to be_a(Time)
      expect(subject.expires_on).to eq(Time.parse("2014-09-06 04:00:00"))
    end
  end
  describe "#registrar" do
    it do
      expect(subject.registrar).to be_a(Whois::Record::Registrar)
      expect(subject.registrar.id).to eq("69")
      expect(subject.registrar.name).to eq("TUCOWS, INC.")
      expect(subject.registrar.organization).to eq("TUCOWS, INC.")
      expect(subject.registrar.url).to eq("http://tucowsdomains.com")
    end
  end
  describe "#registrant_contacts" do
    it do
      expect(subject.registrant_contacts).to be_a(Array)
      expect(subject.registrant_contacts.size).to eq(1)
      expect(subject.registrant_contacts[0]).to be_a(Whois::Record::Contact)
      expect(subject.registrant_contacts[0].type).to eq(Whois::Record::Contact::TYPE_REGISTRANT)
      expect(subject.registrant_contacts[0].name).to eq("DNS Administrator")
      expect(subject.registrant_contacts[0].organization).to eq("Tucows.com Co")
      expect(subject.registrant_contacts[0].address).to eq("96 Mowat Avenue")
      expect(subject.registrant_contacts[0].city).to eq("Toronto")
      expect(subject.registrant_contacts[0].zip).to eq("M6K3M1")
      expect(subject.registrant_contacts[0].state).to eq("Ontario")
      expect(subject.registrant_contacts[0].country_code).to eq("CA")
      expect(subject.registrant_contacts[0].phone).to eq("+1.4165350123 ext: 0000")
      expect(subject.registrant_contacts[0].fax).to eq("")
      expect(subject.registrant_contacts[0].email).to eq("dnsadmin@tucows.com")
    end
  end
  describe "#admin_contacts" do
    it do
      expect(subject.admin_contacts).to be_a(Array)
      expect(subject.admin_contacts.size).to eq(1)
      expect(subject.admin_contacts[0]).to be_a(Whois::Record::Contact)
      expect(subject.admin_contacts[0].type).to eq(Whois::Record::Contact::TYPE_ADMINISTRATIVE)
      expect(subject.admin_contacts[0].name).to eq("DNS Administrator")
      expect(subject.admin_contacts[0].organization).to eq("Tucows ( Delaware ) Inc.")
      expect(subject.admin_contacts[0].address).to eq("96 Mowat Avenue")
      expect(subject.admin_contacts[0].city).to eq("Toronto")
      expect(subject.admin_contacts[0].zip).to eq("M6K3M1")
      expect(subject.admin_contacts[0].state).to eq("Ontario")
      expect(subject.admin_contacts[0].country_code).to eq("CA")
      expect(subject.admin_contacts[0].phone).to eq("+1.4165350123 ext: 0000")
      expect(subject.admin_contacts[0].fax).to eq("")
      expect(subject.admin_contacts[0].email).to eq("dnsadmin@tucows.com")
    end
  end
  describe "#technical_contacts" do
    it do
      expect(subject.technical_contacts).to be_a(Array)
      expect(subject.technical_contacts.size).to eq(1)
      expect(subject.technical_contacts[0]).to be_a(Whois::Record::Contact)
      expect(subject.technical_contacts[0].type).to eq(Whois::Record::Contact::TYPE_TECHNICAL)
      expect(subject.technical_contacts[0].name).to eq("DNS Administrator")
      expect(subject.technical_contacts[0].organization).to eq("Tucows ( Delaware ) Inc.")
      expect(subject.technical_contacts[0].address).to eq("96 Mowat Avenue")
      expect(subject.technical_contacts[0].city).to eq("Toronto")
      expect(subject.technical_contacts[0].zip).to eq("M6K3M1")
      expect(subject.technical_contacts[0].state).to eq("Ontario")
      expect(subject.technical_contacts[0].country_code).to eq("CA")
      expect(subject.technical_contacts[0].phone).to eq("+1.4165350123 ext: 0000")
      expect(subject.technical_contacts[0].fax).to eq("")
      expect(subject.technical_contacts[0].email).to eq("dnsadmin@tucows.com")
    end
  end
  describe "#nameservers" do
    it do
      expect(subject.nameservers).to be_a(Array)
      expect(subject.nameservers.size).to eq(3)
      expect(subject.nameservers[0]).to be_a(Whois::Record::Nameserver)
      expect(subject.nameservers[0].name).to eq("ns3.tucows.com")
      expect(subject.nameservers[0].ipv4).to eq(nil)
      expect(subject.nameservers[1]).to be_a(Whois::Record::Nameserver)
      expect(subject.nameservers[1].name).to eq("ns1.tucows.com")
      expect(subject.nameservers[1].ipv4).to eq(nil)
      expect(subject.nameservers[2]).to be_a(Whois::Record::Nameserver)
      expect(subject.nameservers[2].name).to eq("ns2.tucows.com")
      expect(subject.nameservers[2].ipv4).to eq(nil)
    end
  end
end
