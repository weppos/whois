# encoding: utf-8

# This file is autogenerated. Do not edit it manually.
# If you want change the content of this file, edit
#
#   /spec/fixtures/responses/whois.eurodns.com/status_registered.expected
#
# and regenerate the tests with the following rake task
#
#   $ rake spec:generate
#

require 'spec_helper'
require 'whois/record/parser/whois.eurodns.com.rb'

describe Whois::Record::Parser::WhoisEurodnsCom, "status_registered.expected" do

  subject do
    file = fixture("responses", "whois.eurodns.com/status_registered.txt")
    part = Whois::Record::Part.new(body: File.read(file))
    described_class.new(part)
  end

  describe "#domain" do
    it do
      expect(subject.domain).to eq("onclickads.net")
    end
  end
  describe "#domain_id" do
    it do
      expect(subject.domain_id).to eq("1805898170_DOMAIN_NET-VRSN")
    end
  end
  describe "#status" do
    it do
      expect(subject.status).to eq(:registered)
    end
  end
  describe "#available?" do
    it do
      expect(subject.available?).to eq(false)
    end
  end
  describe "#registered?" do
    it do
      expect(subject.registered?).to eq(true)
    end
  end
  describe "#created_on" do
    it do
      expect(subject.created_on).to eq(Time.parse("2013-06-03T00:00:00Z"))
    end
  end
  describe "#updated_on" do
    it do
      expect(subject.updated_on).to eq(Time.parse("2015-05-15T12:18:25Z"))
    end
  end
  describe "#registrar" do
    it do
      expect(subject.registrar).to be_a(Whois::Record::Registrar)
      expect(subject.registrar.id).to eq("1052")
      expect(subject.registrar.name).to eq("Eurodns S.A.")
      expect(subject.registrar.url).to eq("http://www.eurodns.com")
    end
  end
  describe "#registrant_contacts" do
    it do
      expect(subject.registrant_contacts).to be_a(Array)
      expect(subject.registrant_contacts.size).to eq(1)
      expect(subject.registrant_contacts[0]).to be_a(Whois::Record::Contact)
      expect(subject.registrant_contacts[0].type).to eq(Whois::Record::Contact::TYPE_REGISTRANT)
      expect(subject.registrant_contacts[0].id).to eq(nil)
      expect(subject.registrant_contacts[0].name).to eq("Avery Chris")
      expect(subject.registrant_contacts[0].organization).to eq("Advertising Technologies Ltd.")
      expect(subject.registrant_contacts[0].address).to eq("Quijano Chambers, P.O. Box 3159")
      expect(subject.registrant_contacts[0].city).to eq("Road Town")
      expect(subject.registrant_contacts[0].zip).to eq("VG1110")
      expect(subject.registrant_contacts[0].state).to eq("")
      expect(subject.registrant_contacts[0].country).to eq(nil)
      expect(subject.registrant_contacts[0].country_code).to eq("VG")
      expect(subject.registrant_contacts[0].phone).to eq("+1284")
      expect(subject.registrant_contacts[0].fax).to eq("")
      expect(subject.registrant_contacts[0].email).to eq("advtechnologieshelp@gmail.com")
    end
  end
  describe "#admin_contacts" do
    it do
      expect(subject.admin_contacts).to be_a(Array)
      expect(subject.admin_contacts.size).to eq(1)
      expect(subject.admin_contacts[0]).to be_a(Whois::Record::Contact)
      expect(subject.admin_contacts[0].type).to eq(Whois::Record::Contact::TYPE_ADMINISTRATIVE)
      expect(subject.admin_contacts[0].id).to eq(nil)
      expect(subject.admin_contacts[0].name).to eq("Avery Chris")
      expect(subject.admin_contacts[0].organization).to eq("Advertising Technologies Ltd.")
      expect(subject.admin_contacts[0].address).to eq("Quijano Chambers, P.O. Box 3159")
      expect(subject.admin_contacts[0].city).to eq("Road Town")
      expect(subject.admin_contacts[0].zip).to eq("VG1110")
      expect(subject.admin_contacts[0].state).to eq("")
      expect(subject.admin_contacts[0].country).to eq(nil)
      expect(subject.admin_contacts[0].country_code).to eq("VG")
      expect(subject.admin_contacts[0].phone).to eq("+1284")
      expect(subject.admin_contacts[0].fax).to eq("")
      expect(subject.admin_contacts[0].email).to eq("advtechnologieshelp@gmail.com")
    end
  end
  describe "#technical_contacts" do
    it do
      expect(subject.technical_contacts).to be_a(Array)
      expect(subject.technical_contacts.size).to eq(1)
      expect(subject.technical_contacts[0]).to be_a(Whois::Record::Contact)
      expect(subject.technical_contacts[0].type).to eq(Whois::Record::Contact::TYPE_TECHNICAL)
      expect(subject.technical_contacts[0].id).to eq(nil)
      expect(subject.technical_contacts[0].name).to eq("Avery Chris")
      expect(subject.technical_contacts[0].organization).to eq("Advertising Technologies Ltd.")
      expect(subject.technical_contacts[0].address).to eq("Quijano Chambers, P.O. Box 3159")
      expect(subject.technical_contacts[0].city).to eq("Road Town")
      expect(subject.technical_contacts[0].zip).to eq("VG1110")
      expect(subject.technical_contacts[0].state).to eq("")
      expect(subject.technical_contacts[0].country).to eq(nil)
      expect(subject.technical_contacts[0].country_code).to eq("VG")
      expect(subject.technical_contacts[0].phone).to eq("+1284")
      expect(subject.technical_contacts[0].fax).to eq("")
      expect(subject.technical_contacts[0].email).to eq("advtechnologieshelp@gmail.com")
    end
  end
  describe "#nameservers" do
    it do
      expect(subject.nameservers).to be_a(Array)
      expect(subject.nameservers.size).to eq(4)
      expect(subject.nameservers[0]).to be_a(Whois::Record::Nameserver)
      expect(subject.nameservers[0].name).to eq("ns-1454.awsdns-53.org")
      expect(subject.nameservers[0].ipv4).to eq(nil)
      expect(subject.nameservers[0].ipv6).to eq(nil)
      expect(subject.nameservers[1]).to be_a(Whois::Record::Nameserver)
      expect(subject.nameservers[1].name).to eq("ns-1828.awsdns-36.co.uk")
      expect(subject.nameservers[1].ipv4).to eq(nil)
      expect(subject.nameservers[1].ipv6).to eq(nil)
      expect(subject.nameservers[2]).to be_a(Whois::Record::Nameserver)
      expect(subject.nameservers[2].name).to eq("ns-233.awsdns-29.com")
      expect(subject.nameservers[2].ipv4).to eq(nil)
      expect(subject.nameservers[2].ipv6).to eq(nil)
      expect(subject.nameservers[3]).to be_a(Whois::Record::Nameserver)
      expect(subject.nameservers[3].name).to eq("ns-599.awsdns-10.net")
      expect(subject.nameservers[3].ipv4).to eq(nil)
      expect(subject.nameservers[3].ipv6).to eq(nil)
    end
  end
end
