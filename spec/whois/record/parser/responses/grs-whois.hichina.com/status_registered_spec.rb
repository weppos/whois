# encoding: utf-8

# This file is autogenerated. Do not edit it manually.
# If you want change the content of this file, edit
#
#   /spec/fixtures/responses/grs-whois.hichina.com/status_registered.expected
#
# and regenerate the tests with the following rake task
#
#   $ rake spec:generate
#

require 'spec_helper'
require 'whois/record/parser/grs-whois.hichina.com.rb'

describe Whois::Record::Parser::GrsWhoisHichinaCom, "status_registered.expected" do

  subject do
    file = fixture("responses", "grs-whois.hichina.com/status_registered.txt")
    part = Whois::Record::Part.new(body: File.read(file))
    described_class.new(part)
  end

  describe "#disclaimer" do
    it do
      expect(subject.disclaimer).to eq("<a href='http://www.net.cn/?utm_campaign=Corn&utm_medium=banner&utm_source=whois' target='_blank'><img src='http://whois.hichina.com/images/whois-banner.gif' border='0'></a>For complete domain details go to:http://whois.hichina.com/whois/domain/hichina.com")
    end
  end
  describe "#domain" do
    it do
      expect(subject.domain).to eq("hichina.com")
    end
  end
  describe "#domain_id" do
    it do
      expect { subject.domain_id }.to raise_error(Whois::AttributeNotSupported)
    end
  end
  describe "#status" do
    it do
      expect { subject.status }.to raise_error(Whois::AttributeNotSupported)
    end
  end
  describe "#available?" do
    it do
      expect(subject.available?).to eq(false)
    end
  end
  describe "#registered?" do
    it do
      expect(subject.registered?).to eq(true)
    end
  end
  describe "#created_on" do
    it do
      expect(subject.created_on).to be_a(Time)
      expect(subject.created_on).to eq(Time.parse("1996-04-23 12:00:00"))
    end
  end
  describe "#updated_on" do
    it do
      expect { subject.updated_on }.to raise_error(Whois::AttributeNotSupported)
    end
  end
  describe "#expires_on" do
    it do
      expect(subject.expires_on).to be_a(Time)
      expect(subject.expires_on).to eq(Time.parse("2019-04-24 12:00:00"))
    end
  end
  describe "#registrar" do
    it do
      expect(subject.registrar).to be_a(Whois::Record::Registrar)
      expect(subject.registrar.id).to eq(nil)
      expect(subject.registrar.name).to eq("HICHINA ZHICHENG TECHNOLOGY LTD.")
      expect(subject.registrar.organization).to eq(nil)
      expect(subject.registrar.url).to eq(nil)
    end
  end
  describe "#registrant_contacts" do
    it do
      expect(subject.registrant_contacts).to be_a(Array)
      expect(subject.registrant_contacts).to have(1).items
      expect(subject.registrant_contacts[0]).to be_a(Whois::Record::Contact)
      expect(subject.registrant_contacts[0].type).to eq(Whois::Record::Contact::TYPE_REGISTRANT)
      expect(subject.registrant_contacts[0].id).to eq("hc0815466063-cn")
      expect(subject.registrant_contacts[0].name).to eq("Mingjing Ma")
      expect(subject.registrant_contacts[0].organization).to eq("Beijing Wanwang Zhicheng Keji Youxian Gongsi")
      expect(subject.registrant_contacts[0].address).to eq("3 F.,HiChina Mansion,No.27 Gulouwai Avenue Dongcheng")
      expect(subject.registrant_contacts[0].city).to eq("Beijing")
      expect(subject.registrant_contacts[0].zip).to eq("100011")
      expect(subject.registrant_contacts[0].state).to eq("Beijing")
      expect(subject.registrant_contacts[0].country_code).to eq("CN")
      expect(subject.registrant_contacts[0].phone).to eq("+86.01062642299")
      expect(subject.registrant_contacts[0].fax).to eq("+86.01064242299")
      expect(subject.registrant_contacts[0].email).to eq("mamj@hichina.com")
    end
  end
  describe "#admin_contacts" do
    it do
      expect(subject.admin_contacts).to be_a(Array)
      expect(subject.admin_contacts).to have(1).items
      expect(subject.admin_contacts[0]).to be_a(Whois::Record::Contact)
      expect(subject.admin_contacts[0].type).to eq(Whois::Record::Contact::TYPE_ADMINISTRATIVE)
      expect(subject.admin_contacts[0].id).to eq("admin")
      expect(subject.admin_contacts[0].name).to eq("admin")
      expect(subject.admin_contacts[0].organization).to eq("HiChina Web Solutions (Hong Kong) Limited")
      expect(subject.admin_contacts[0].address).to eq("3/F., HiChina Mansion, No.27 Gulouwai Avenue Dongcheng District, Beijing, China")
      expect(subject.admin_contacts[0].city).to eq("Beijing")
      expect(subject.admin_contacts[0].zip).to eq("100011")
      expect(subject.admin_contacts[0].state).to eq("Beijing")
      expect(subject.admin_contacts[0].country_code).to eq("CN")
      expect(subject.admin_contacts[0].phone).to eq("+86.01064242299")
      expect(subject.admin_contacts[0].fax).to eq("+86.01064254247")
      expect(subject.admin_contacts[0].email).to eq("domainadm@hichina.com")
    end
  end
  describe "#technical_contacts" do
    it do
      expect(subject.technical_contacts).to be_a(Array)
      expect(subject.technical_contacts).to have(1).items
      expect(subject.technical_contacts[0]).to be_a(Whois::Record::Contact)
      expect(subject.technical_contacts[0].type).to eq(Whois::Record::Contact::TYPE_TECHNICAL)
      expect(subject.technical_contacts[0].id).to eq("tech")
      expect(subject.technical_contacts[0].name).to eq("tech")
      expect(subject.technical_contacts[0].organization).to eq("HiChina Web Solutions (Hong Kong) Limited")
      expect(subject.technical_contacts[0].address).to eq("3/F., HiChina Mansion, No.27 Gulouwai Avenue Dongcheng District, Beijing, China")
      expect(subject.technical_contacts[0].city).to eq("Beijing")
      expect(subject.technical_contacts[0].zip).to eq("100011")
      expect(subject.technical_contacts[0].state).to eq("Beijing")
      expect(subject.technical_contacts[0].country_code).to eq("CN")
      expect(subject.technical_contacts[0].phone).to eq("+86.01064242299")
      expect(subject.technical_contacts[0].fax).to eq("+86.01064254247")
      expect(subject.technical_contacts[0].email).to eq("domainadm@hichina.com")
    end
  end
  describe "#nameservers" do
    it do
      expect(subject.nameservers).to be_a(Array)
      expect(subject.nameservers).to have(2).items
      expect(subject.nameservers[0]).to be_a(Whois::Record::Nameserver)
      expect(subject.nameservers[0].name).to eq("ns3.hichina.com")
      expect(subject.nameservers[1]).to be_a(Whois::Record::Nameserver)
      expect(subject.nameservers[1].name).to eq("ns4.hichina.com")
    end
  end
end
