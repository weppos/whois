# encoding: utf-8

# This file is autogenerated. Do not edit it manually.
# If you want change the content of this file, edit
#
#   /spec/fixtures/responses/whois.nic.uk/status_reserved.expected
#
# and regenerate the tests with the following rake task
#
#   $ rake spec:generate
#

require 'spec_helper'
require 'whois/record/parser/whois.nic.uk.rb'

describe Whois::Record::Parser::WhoisNicUk, "status_reserved.expected" do

  subject do
    file = fixture("responses", "whois.nic.uk/status_reserved.txt")
    part = Whois::Record::Part.new(body: File.read(file))
    described_class.new(part)
  end

  describe "#status" do
    it do
      expect(subject.status).to eq(:reserved)
    end
  end
  describe "#available?" do
    it do
      expect(subject.available?).to be_falsey
    end
  end
  describe "#registered?" do
    it do
      expect(subject.registered?).to be_truthy
    end
  end
  describe "#created_on" do
    it do
      expect(subject.created_on).to be_a(Time)
      expect(subject.created_on).to eq(Time.parse("1996-08-01"))
    end
  end
  describe "#updated_on" do
    it do
      expect(subject.updated_on).to be_a(Time)
      expect(subject.updated_on).to eq(Time.parse("2012-03-23"))
    end
  end
  describe "#expires_on" do
    it do
      expect(subject.expires_on).to eq(nil)
    end
  end
  describe "#registrar" do
    it do
      expect(subject.registrar).to be_a(Whois::Record::Registrar)
      expect(subject.registrar.id).to eq(nil)
      expect(subject.registrar.name).to eq("Nominet")
      expect(subject.registrar.organization).to eq("Nominet UK")
      expect(subject.registrar.url).to eq("http://www.nic.uk/")
    end
  end
  describe "#registrant_contacts" do
    it do
      expect(subject.registrant_contacts).to be_a(Array)
      expect(subject.registrant_contacts.size).to eq(1)
      expect(subject.registrant_contacts[0]).to be_a(Whois::Record::Contact)
      expect(subject.registrant_contacts[0].type).to eq(Whois::Record::Contact::TYPE_REGISTRANT)
      expect(subject.registrant_contacts[0].id).to eq(nil)
      expect(subject.registrant_contacts[0].name).to eq("Nominet UK")
      expect(subject.registrant_contacts[0].organization).to eq(nil)
      expect(subject.registrant_contacts[0].address).to eq("Minerva House, Edmund Halley Road\nOxford Science Park")
      expect(subject.registrant_contacts[0].city).to eq("Oxford")
      expect(subject.registrant_contacts[0].zip).to eq("OX4 4DQ")
      expect(subject.registrant_contacts[0].state).to eq("Oxon")
      expect(subject.registrant_contacts[0].country).to eq("United Kingdom")
    end
  end
  describe "#nameservers" do
    it do
      expect(subject.nameservers).to be_a(Array)
      expect(subject.nameservers.size).to eq(3)
      expect(subject.nameservers[0]).to be_a(Whois::Record::Nameserver)
      expect(subject.nameservers[0].name).to eq("nom-ns1.nominet.org.uk")
      expect(subject.nameservers[0].ipv4).to eq("213.248.199.16")
      expect(subject.nameservers[0].ipv6).to eq(nil)
      expect(subject.nameservers[1]).to be_a(Whois::Record::Nameserver)
      expect(subject.nameservers[1].name).to eq("nom-ns2.nominet.org.uk")
      expect(subject.nameservers[1].ipv4).to eq("195.66.240.250")
      expect(subject.nameservers[1].ipv6).to eq("2a01:40:1001:37::2")
      expect(subject.nameservers[2]).to be_a(Whois::Record::Nameserver)
      expect(subject.nameservers[2].name).to eq("nom-ns3.nominet.org.uk")
      expect(subject.nameservers[2].ipv4).to eq("213.219.13.194")
      expect(subject.nameservers[2].ipv6).to eq(nil)
    end
  end
  describe "#response_throttled?" do
    it do
      expect(subject.response_throttled?).to be_falsey
    end
  end
  describe "#valid?" do
    it do
      expect(subject.valid?).to be_truthy
    end
  end
  describe "#invalid?" do
    it do
      expect(subject.invalid?).to be_falsey
    end
  end
end
